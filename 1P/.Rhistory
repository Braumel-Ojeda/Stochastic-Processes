n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 10
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_ruined <- res[res[[1]] == 1][2]
print(res_ruined)
#res_reach_goal <- res_ruined[[2]]
#print("")
#print(res_reach_goal)
#prob_reach_goal <- length(res_reach_goal[res_reach_goal == TRUE]) / trials
#cat("The probability of reach the goal of ", goal, " before lossing everything is ", prob_reach_goal)
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 10
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_ruined <- res[res[[]][1] == 1]
print(res_ruined)
#res_reach_goal <- res_ruined[[2]]
#print("")
#print(res_reach_goal)
#prob_reach_goal <- length(res_reach_goal[res_reach_goal == TRUE]) / trials
#cat("The probability of reach the goal of ", goal, " before lossing everything is ", prob_reach_goal)
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 10
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
print(res[[]][1])
#res_ruined <- res[res[[]][1] == 1]
#print(res_ruined)
#res_reach_goal <- res_ruined[[2]]
#print("")
#print(res_reach_goal)
#prob_reach_goal <- length(res_reach_goal[res_reach_goal == TRUE]) / trials
#cat("The probability of reach the goal of ", goal, " before lossing everything is ", prob_reach_goal)
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 10
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
print(res[,2])
#res_ruined <- res[res[[]][1] == 1]
#print(res_ruined)
#res_reach_goal <- res_ruined[[2]]
#print("")
#print(res_reach_goal)
#prob_reach_goal <- length(res_reach_goal[res_reach_goal == TRUE]) / trials
#cat("The probability of reach the goal of ", goal, " before lossing everything is ", prob_reach_goal)
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 10
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_ruined <- res[res[1,] == 1]
print(res_ruined)
#res_reach_goal <- res_ruined[[2]]
#print("")
#print(res_reach_goal)
#prob_reach_goal <- length(res_reach_goal[res_reach_goal == TRUE]) / trials
#cat("The probability of reach the goal of ", goal, " before lossing everything is ", prob_reach_goal)
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 5
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_ruined <- res[res[1,] == 1,]
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 5
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_ruined <- res[[res[1,] == 1]]
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 5
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_ruined <- res[res[1,] == 1][2]
print(res_ruined)
#res_reach_goal <- res_ruined[[2]]
#print("")
#print(res_reach_goal)
#prob_reach_goal <- length(res_reach_goal[res_reach_goal == TRUE]) / trials
#cat("The probability of reach the goal of ", goal, " before lossing everything is ", prob_reach_goal)
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 5
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_ruined <- res[res[1,] == 1]
print(res_ruined)
#res_reach_goal <- res_ruined[[2]]
#print("")
#print(res_reach_goal)
#prob_reach_goal <- length(res_reach_goal[res_reach_goal == TRUE]) / trials
#cat("The probability of reach the goal of ", goal, " before lossing everything is ", prob_reach_goal)
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 5
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_ruined <- res[res[1,] == 1,]
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 5
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_ruined <- res[2, res[1,] == 1]
print(res_ruined)
#res_reach_goal <- res_ruined[[2]]
#print("")
#print(res_reach_goal)
#prob_reach_goal <- length(res_reach_goal[res_reach_goal == TRUE]) / trials
#cat("The probability of reach the goal of ", goal, " before lossing everything is ", prob_reach_goal)
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 5
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_reach_goal <- res[2, res[1,] == 1 & res[2,] == TRUE]
print(res_reach_goal)
prob_reach_goal <- length(res_reach_goal[res_reach_goal == TRUE]) / trials
#cat("The probability of reach the goal of ", goal, " before lossing everything is ", prob_reach_goal)
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 5
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_reach_goal <- res[2, res[1,] == 1 & res[2,] == TRUE]
print(res_reach_goal)
prob_reach_goal <- length(res_reach_goal) / trials
cat("The probability of reach the goal of ", goal, " before lossing everything is ", prob_reach_goal)
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 5
res <- replicate(trials, gamble(k, n, p, goal))
print(res)
res_reach_goal <- res[2, res[1,] == 1 & res[2,] == TRUE]
print(res_reach_goal)
prob_reach_goal <- length(res_reach_goal) / trials
cat("The probability of reaching the goal of $", goal, "before lossing everything is",prob_reach_goal)
# gamblersruin.R
# Example 1.11
# gamble(k, n, p)
#   k: Gambler's initial state
#   n: Gambler plays until either $n or Ruin
#   p: Probability of winning $1 at each play
#   Function returns 1 if gambler is eventually ruined
#                    returns 0 if gambler eventually wins $n
gamble <- function(k, n, p, goal) {
stake <- k
reach_goal <- FALSE
i <- 1
while (stake > 0 & stake < n) {
bet <- sample(c(-1, 1), 1, prob = c(1 - p, p))
stake <- stake + bet
if (stake == 100)
reach_goal = TRUE
i <- i + 1
}
if (stake == 0)
return(list(1, reach_goal))
else
return(list(0, reach_goal))
}
k <- 60
n <-  10000 # Let's assign a big number to represent that the rival has so much money
p <- 1/2
goal <- 100
trials <- 1000
res <- replicate(trials, gamble(k, n, p, goal))
